// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/06/2023 14:03:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MULTIPLY
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MULTIPLY_vlg_sample_tst(
	C,
	CLK,
	Input,
	Start,
	sampler_tx
);
input [2:0] C;
input  CLK;
input [7:0] Input;
input  Start;
output sampler_tx;

reg sample;
time current_time;
always @(C or CLK or Input or Start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MULTIPLY_vlg_check_tst (
	Output,
	OutputSUM,
	Q0,
	Q1,
	Q2,
	sampler_rx
);
input [7:0] Output;
input [7:0] OutputSUM;
input  Q0;
input  Q1;
input  Q2;
input sampler_rx;

reg [7:0] Output_expected;
reg [7:0] OutputSUM_expected;
reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;

reg [7:0] Output_prev;
reg [7:0] OutputSUM_prev;
reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;

reg [7:0] Output_expected_prev;
reg [7:0] OutputSUM_expected_prev;
reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;

reg [7:0] last_Output_exp;
reg [7:0] last_OutputSUM_exp;
reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Output_prev = Output;
	OutputSUM_prev = OutputSUM;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
end

// update expected /o prevs

always @(trigger)
begin
	Output_expected_prev = Output_expected;
	OutputSUM_expected_prev = OutputSUM_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
end



// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 
// expected \Output [ 7 ]
initial
begin
	Output_expected[7] = 1'b0;
end 
// expected \Output [ 6 ]
initial
begin
	Output_expected[6] = 1'b0;
end 
// expected \Output [ 5 ]
initial
begin
	Output_expected[5] = 1'b0;
	Output_expected[5] = #960000 1'b1;
end 
// expected \Output [ 4 ]
initial
begin
	Output_expected[4] = 1'b0;
	Output_expected[4] = #480000 1'b1;
	Output_expected[4] = #480000 1'b0;
end 
// expected \Output [ 3 ]
initial
begin
	repeat(2)
	begin
		Output_expected[3] = 1'b0;
		Output_expected[3] = #240000 1'b1;
		# 240000;
	end
	Output_expected[3] = 1'b0;
end 
// expected \Output [ 2 ]
initial
begin
	repeat(4)
	begin
		Output_expected[2] = 1'b0;
		Output_expected[2] = #120000 1'b1;
		# 120000;
	end
	Output_expected[2] = 1'b0;
end 
// expected \Output [ 1 ]
initial
begin
	repeat(8)
	begin
		Output_expected[1] = 1'b0;
		Output_expected[1] = #60000 1'b1;
		# 60000;
	end
	Output_expected[1] = 1'b0;
end 
// expected \Output [ 0 ]
initial
begin
	repeat(16)
	begin
		Output_expected[0] = 1'b0;
		Output_expected[0] = #30000 1'b1;
		# 30000;
	end
	Output_expected[0] = 1'b0;
	Output_expected[0] = #30000 1'b1;
end 
// expected OutputSUM[ 7 ]
initial
begin
	OutputSUM_expected[7] = 1'bX;
end 
// expected OutputSUM[ 6 ]
initial
begin
	OutputSUM_expected[6] = 1'bX;
end 
// expected OutputSUM[ 5 ]
initial
begin
	OutputSUM_expected[5] = 1'bX;
end 
// expected OutputSUM[ 4 ]
initial
begin
	OutputSUM_expected[4] = 1'bX;
end 
// expected OutputSUM[ 3 ]
initial
begin
	OutputSUM_expected[3] = 1'bX;
end 
// expected OutputSUM[ 2 ]
initial
begin
	OutputSUM_expected[2] = 1'bX;
end 
// expected OutputSUM[ 1 ]
initial
begin
	OutputSUM_expected[1] = 1'bX;
end 
// expected OutputSUM[ 0 ]
initial
begin
	OutputSUM_expected[0] = 1'bX;
end 
// generate trigger
always @(Output_expected or Output or OutputSUM_expected or OutputSUM or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Output = %b | expected OutputSUM = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | ",Output_expected_prev,OutputSUM_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev);
	$display("| real Output = %b | real OutputSUM = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | ",Output_prev,OutputSUM_prev,Q0_prev,Q1_prev,Q2_prev);
`endif
	if (
		( Output_expected_prev[0] !== 1'bx ) && ( Output_prev[0] !== Output_expected_prev[0] )
		&& ((Output_expected_prev[0] !== last_Output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[0] = Output_expected_prev[0];
	end
	if (
		( Output_expected_prev[1] !== 1'bx ) && ( Output_prev[1] !== Output_expected_prev[1] )
		&& ((Output_expected_prev[1] !== last_Output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[1] = Output_expected_prev[1];
	end
	if (
		( Output_expected_prev[2] !== 1'bx ) && ( Output_prev[2] !== Output_expected_prev[2] )
		&& ((Output_expected_prev[2] !== last_Output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[2] = Output_expected_prev[2];
	end
	if (
		( Output_expected_prev[3] !== 1'bx ) && ( Output_prev[3] !== Output_expected_prev[3] )
		&& ((Output_expected_prev[3] !== last_Output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[3] = Output_expected_prev[3];
	end
	if (
		( Output_expected_prev[4] !== 1'bx ) && ( Output_prev[4] !== Output_expected_prev[4] )
		&& ((Output_expected_prev[4] !== last_Output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[4] = Output_expected_prev[4];
	end
	if (
		( Output_expected_prev[5] !== 1'bx ) && ( Output_prev[5] !== Output_expected_prev[5] )
		&& ((Output_expected_prev[5] !== last_Output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[5] = Output_expected_prev[5];
	end
	if (
		( Output_expected_prev[6] !== 1'bx ) && ( Output_prev[6] !== Output_expected_prev[6] )
		&& ((Output_expected_prev[6] !== last_Output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[6] = Output_expected_prev[6];
	end
	if (
		( Output_expected_prev[7] !== 1'bx ) && ( Output_prev[7] !== Output_expected_prev[7] )
		&& ((Output_expected_prev[7] !== last_Output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_expected_prev);
		$display ("     Real value = %b", Output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Output_exp[7] = Output_expected_prev[7];
	end
	if (
		( OutputSUM_expected_prev[0] !== 1'bx ) && ( OutputSUM_prev[0] !== OutputSUM_expected_prev[0] )
		&& ((OutputSUM_expected_prev[0] !== last_OutputSUM_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[0] = OutputSUM_expected_prev[0];
	end
	if (
		( OutputSUM_expected_prev[1] !== 1'bx ) && ( OutputSUM_prev[1] !== OutputSUM_expected_prev[1] )
		&& ((OutputSUM_expected_prev[1] !== last_OutputSUM_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[1] = OutputSUM_expected_prev[1];
	end
	if (
		( OutputSUM_expected_prev[2] !== 1'bx ) && ( OutputSUM_prev[2] !== OutputSUM_expected_prev[2] )
		&& ((OutputSUM_expected_prev[2] !== last_OutputSUM_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[2] = OutputSUM_expected_prev[2];
	end
	if (
		( OutputSUM_expected_prev[3] !== 1'bx ) && ( OutputSUM_prev[3] !== OutputSUM_expected_prev[3] )
		&& ((OutputSUM_expected_prev[3] !== last_OutputSUM_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[3] = OutputSUM_expected_prev[3];
	end
	if (
		( OutputSUM_expected_prev[4] !== 1'bx ) && ( OutputSUM_prev[4] !== OutputSUM_expected_prev[4] )
		&& ((OutputSUM_expected_prev[4] !== last_OutputSUM_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[4] = OutputSUM_expected_prev[4];
	end
	if (
		( OutputSUM_expected_prev[5] !== 1'bx ) && ( OutputSUM_prev[5] !== OutputSUM_expected_prev[5] )
		&& ((OutputSUM_expected_prev[5] !== last_OutputSUM_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[5] = OutputSUM_expected_prev[5];
	end
	if (
		( OutputSUM_expected_prev[6] !== 1'bx ) && ( OutputSUM_prev[6] !== OutputSUM_expected_prev[6] )
		&& ((OutputSUM_expected_prev[6] !== last_OutputSUM_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[6] = OutputSUM_expected_prev[6];
	end
	if (
		( OutputSUM_expected_prev[7] !== 1'bx ) && ( OutputSUM_prev[7] !== OutputSUM_expected_prev[7] )
		&& ((OutputSUM_expected_prev[7] !== last_OutputSUM_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OutputSUM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OutputSUM_expected_prev);
		$display ("     Real value = %b", OutputSUM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OutputSUM_exp[7] = OutputSUM_expected_prev[7];
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MULTIPLY_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] C;
reg CLK;
reg [7:0] Input;
reg Start;
// wires                                               
wire [7:0] Output;
wire [7:0] OutputSUM;
wire Q0;
wire Q1;
wire Q2;

wire sampler;                             

// assign statements (if any)                          
MULTIPLY i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.CLK(CLK),
	.\Input (Input),
	.\Output (Output),
	.OutputSUM(OutputSUM),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Start(Start)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b1;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b0;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #10000 1'b1;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b0;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b0;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b0;
	Input[5] = #960000 1'b1;
end 
// \Input [ 4 ]
initial
begin
	Input[4] = 1'b0;
	Input[4] = #480000 1'b1;
	Input[4] = #240000 1'b0;
	Input[4] = #50000 1'b1;
	Input[4] = #190000 1'b0;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b0;
	Input[3] = #300000 1'b1;
	Input[3] = #180000 1'b0;
	Input[3] = #270000 1'b1;
	Input[3] = #210000 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b0;
	Input[2] = #30000 1'b1;
	Input[2] = #40000 1'b0;
	Input[2] = #200000 1'b1;
	Input[2] = #30000 1'b0;
	Input[2] = #60000 1'b1;
	Input[2] = #120000 1'b0;
	Input[2] = #120000 1'b1;
	Input[2] = #150000 1'b0;
	Input[2] = #90000 1'b1;
	Input[2] = #120000 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b0;
	Input[1] = #30000 1'b1;
	Input[1] = #40000 1'b0;
	Input[1] = #200000 1'b1;
	Input[1] = #30000 1'b0;
	Input[1] = #30000 1'b1;
	Input[1] = #30000 1'b0;
	Input[1] = #60000 1'b1;
	Input[1] = #60000 1'b0;
	Input[1] = #60000 1'b1;
	Input[1] = #60000 1'b0;
	Input[1] = #60000 1'b1;
	Input[1] = #90000 1'b0;
	Input[1] = #30000 1'b1;
	Input[1] = #60000 1'b0;
	Input[1] = #60000 1'b1;
	Input[1] = #60000 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
	Input[0] = #50000 1'b1;
	Input[0] = #20000 1'b0;
	Input[0] = #200000 1'b1;
	Input[0] = #30000 1'b0;
	Input[0] = #20000 1'b1;
	Input[0] = #40000 1'b0;
	Input[0] = #30000 1'b1;
	# 30000;
	repeat(4)
	begin
		Input[0] = 1'b0;
		Input[0] = #30000 1'b1;
		# 30000;
	end
	Input[0] = 1'b0;
	Input[0] = #30000 1'b1;
	Input[0] = #60000 1'b0;
	Input[0] = #20000 1'b1;
	Input[0] = #10000 1'b0;
	Input[0] = #30000 1'b1;
	# 30000;
	repeat(2)
	begin
		Input[0] = 1'b0;
		Input[0] = #30000 1'b1;
		# 30000;
	end
	Input[0] = 1'b0;
	Input[0] = #30000 1'b1;
end 

MULTIPLY_vlg_sample_tst tb_sample (
	.C(C),
	.CLK(CLK),
	.Input(Input),
	.Start(Start),
	.sampler_tx(sampler)
);

MULTIPLY_vlg_check_tst tb_out(
	.Output(Output),
	.OutputSUM(OutputSUM),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.sampler_rx(sampler)
);
endmodule

