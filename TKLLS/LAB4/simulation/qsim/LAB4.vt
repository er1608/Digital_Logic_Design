// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2023 11:16:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LAB4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LAB4_vlg_sample_tst(
	CLK,
	Input,
	RESET,
	X,
	sampler_tx
);
input  CLK;
input [15:0] Input;
input  RESET;
input  X;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Input or RESET or X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LAB4_vlg_check_tst (
	A,
	OUTPUT,
	Q0,
	Q1,
	Q2,
	Q3,
	RESULT,
	sampler_rx
);
input [15:0] A;
input [15:0] OUTPUT;
input  Q0;
input  Q1;
input  Q2;
input  Q3;
input [15:0] RESULT;
input sampler_rx;

reg [15:0] A_expected;
reg [15:0] OUTPUT_expected;
reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  Q3_expected;
reg [15:0] RESULT_expected;

reg [15:0] A_prev;
reg [15:0] OUTPUT_prev;
reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  Q3_prev;
reg [15:0] RESULT_prev;

reg [15:0] A_expected_prev;
reg [15:0] OUTPUT_expected_prev;
reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  Q3_expected_prev;
reg [15:0] RESULT_expected_prev;

reg [15:0] last_A_exp;
reg [15:0] last_OUTPUT_exp;
reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_Q3_exp;
reg [15:0] last_RESULT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	OUTPUT_prev = OUTPUT;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	Q3_prev = Q3;
	RESULT_prev = RESULT;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	OUTPUT_expected_prev = OUTPUT_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	Q3_expected_prev = Q3_expected;
	RESULT_expected_prev = RESULT_expected;
end


// expected A[ 15 ]
initial
begin
	A_expected[15] = 1'b0;
end 
// expected A[ 14 ]
initial
begin
	A_expected[14] = 1'b0;
end 
// expected A[ 13 ]
initial
begin
	A_expected[13] = 1'b0;
end 
// expected A[ 12 ]
initial
begin
	A_expected[12] = 1'b0;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'b0;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'b0;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'b0;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'b0;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'b0;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'b0;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'b0;
	A_expected[5] = #640000 1'b1;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'b0;
	A_expected[4] = #320000 1'b1;
	A_expected[4] = #320000 1'b0;
	A_expected[4] = #320000 1'b1;
end 
// expected A[ 3 ]
initial
begin
	repeat(3)
	begin
		A_expected[3] = 1'b0;
		A_expected[3] = #160000 1'b1;
		# 160000;
	end
	A_expected[3] = 1'b0;
end 
// expected A[ 2 ]
initial
begin
	repeat(6)
	begin
		A_expected[2] = 1'b0;
		A_expected[2] = #80000 1'b1;
		# 80000;
	end
	A_expected[2] = 1'b0;
end 
// expected A[ 1 ]
initial
begin
	repeat(12)
	begin
		A_expected[1] = 1'b0;
		A_expected[1] = #40000 1'b1;
		# 40000;
	end
	A_expected[1] = 1'b0;
end 
// expected A[ 0 ]
always
begin
	A_expected[0] = 1'b0;
	A_expected[0] = #20000 1'b1;
	#20000;
end 

// expected Q3
initial
begin
	repeat(3)
	begin
		Q3_expected = 1'b0;
		Q3_expected = #160000 1'b1;
		# 160000;
	end
	Q3_expected = 1'b0;
end 

// expected Q2
initial
begin
	repeat(6)
	begin
		Q2_expected = 1'b0;
		Q2_expected = #80000 1'b1;
		# 80000;
	end
	Q2_expected = 1'b0;
end 

// expected Q1
initial
begin
	repeat(12)
	begin
		Q1_expected = 1'b0;
		Q1_expected = #40000 1'b1;
		# 40000;
	end
	Q1_expected = 1'b0;
end 

// expected Q0
always
begin
	Q0_expected = 1'b0;
	Q0_expected = #20000 1'b1;
	#20000;
end 
// expected RESULT[ 15 ]
initial
begin
	RESULT_expected[15] = 1'b0;
end 
// expected RESULT[ 14 ]
initial
begin
	RESULT_expected[14] = 1'b0;
end 
// expected RESULT[ 13 ]
initial
begin
	RESULT_expected[13] = 1'b0;
end 
// expected RESULT[ 12 ]
initial
begin
	RESULT_expected[12] = 1'b0;
end 
// expected RESULT[ 11 ]
initial
begin
	RESULT_expected[11] = 1'b0;
end 
// expected RESULT[ 10 ]
initial
begin
	RESULT_expected[10] = 1'b0;
end 
// expected RESULT[ 9 ]
initial
begin
	RESULT_expected[9] = 1'b0;
end 
// expected RESULT[ 8 ]
initial
begin
	RESULT_expected[8] = 1'b0;
end 
// expected RESULT[ 7 ]
initial
begin
	RESULT_expected[7] = 1'b0;
end 
// expected RESULT[ 6 ]
initial
begin
	RESULT_expected[6] = 1'b0;
end 
// expected RESULT[ 5 ]
initial
begin
	RESULT_expected[5] = 1'b0;
	RESULT_expected[5] = #640000 1'b1;
end 
// expected RESULT[ 4 ]
initial
begin
	RESULT_expected[4] = 1'b0;
	RESULT_expected[4] = #320000 1'b1;
	RESULT_expected[4] = #320000 1'b0;
	RESULT_expected[4] = #320000 1'b1;
end 
// expected RESULT[ 3 ]
initial
begin
	repeat(3)
	begin
		RESULT_expected[3] = 1'b0;
		RESULT_expected[3] = #160000 1'b1;
		# 160000;
	end
	RESULT_expected[3] = 1'b0;
end 
// expected RESULT[ 2 ]
initial
begin
	repeat(6)
	begin
		RESULT_expected[2] = 1'b0;
		RESULT_expected[2] = #80000 1'b1;
		# 80000;
	end
	RESULT_expected[2] = 1'b0;
end 
// expected RESULT[ 1 ]
initial
begin
	repeat(12)
	begin
		RESULT_expected[1] = 1'b0;
		RESULT_expected[1] = #40000 1'b1;
		# 40000;
	end
	RESULT_expected[1] = 1'b0;
end 
// expected RESULT[ 0 ]
always
begin
	RESULT_expected[0] = 1'b0;
	RESULT_expected[0] = #20000 1'b1;
	#20000;
end 
// expected \OUTPUT [ 15 ]
initial
begin
	OUTPUT_expected[15] = 1'b0;
end 
// expected \OUTPUT [ 14 ]
initial
begin
	OUTPUT_expected[14] = 1'b0;
end 
// expected \OUTPUT [ 13 ]
initial
begin
	OUTPUT_expected[13] = 1'b0;
end 
// expected \OUTPUT [ 12 ]
initial
begin
	OUTPUT_expected[12] = 1'b0;
end 
// expected \OUTPUT [ 11 ]
initial
begin
	OUTPUT_expected[11] = 1'b0;
end 
// expected \OUTPUT [ 10 ]
initial
begin
	OUTPUT_expected[10] = 1'b0;
end 
// expected \OUTPUT [ 9 ]
initial
begin
	OUTPUT_expected[9] = 1'b0;
end 
// expected \OUTPUT [ 8 ]
initial
begin
	OUTPUT_expected[8] = 1'b0;
end 
// expected \OUTPUT [ 7 ]
initial
begin
	OUTPUT_expected[7] = 1'b0;
end 
// expected \OUTPUT [ 6 ]
initial
begin
	OUTPUT_expected[6] = 1'b0;
end 
// expected \OUTPUT [ 5 ]
initial
begin
	OUTPUT_expected[5] = 1'b0;
	OUTPUT_expected[5] = #660000 1'b1;
end 
// expected \OUTPUT [ 4 ]
initial
begin
	OUTPUT_expected[4] = 1'b0;
	OUTPUT_expected[4] = #340000 1'b1;
	OUTPUT_expected[4] = #320000 1'b0;
	OUTPUT_expected[4] = #320000 1'b1;
end 
// expected \OUTPUT [ 3 ]
initial
begin
	OUTPUT_expected[3] = 1'b0;
	OUTPUT_expected[3] = #180000 1'b1;
	# 160000;
	repeat(2)
	begin
		OUTPUT_expected[3] = 1'b0;
		OUTPUT_expected[3] = #160000 1'b1;
		# 160000;
	end
	OUTPUT_expected[3] = 1'b0;
end 
// expected \OUTPUT [ 2 ]
initial
begin
	OUTPUT_expected[2] = 1'b0;
	OUTPUT_expected[2] = #100000 1'b1;
	# 80000;
	repeat(5)
	begin
		OUTPUT_expected[2] = 1'b0;
		OUTPUT_expected[2] = #80000 1'b1;
		# 80000;
	end
	OUTPUT_expected[2] = 1'b0;
end 
// expected \OUTPUT [ 1 ]
initial
begin
	OUTPUT_expected[1] = 1'b0;
	OUTPUT_expected[1] = #60000 1'b1;
	# 40000;
	repeat(11)
	begin
		OUTPUT_expected[1] = 1'b0;
		OUTPUT_expected[1] = #40000 1'b1;
		# 40000;
	end
	OUTPUT_expected[1] = 1'b0;
end 
// expected \OUTPUT [ 0 ]
initial
begin
	OUTPUT_expected[0] = 1'b0;
	OUTPUT_expected[0] = #40000 1'b1;
	# 20000;
	repeat(23)
	begin
		OUTPUT_expected[0] = 1'b0;
		OUTPUT_expected[0] = #20000 1'b1;
		# 20000;
	end
	OUTPUT_expected[0] = 1'b0;
end 
// generate trigger
always @(A_expected or A or OUTPUT_expected or OUTPUT or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2 or Q3_expected or Q3 or RESULT_expected or RESULT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected OUTPUT = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | expected Q3 = %b | expected RESULT = %b | ",A_expected_prev,OUTPUT_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev,Q3_expected_prev,RESULT_expected_prev);
	$display("| real A = %b | real OUTPUT = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | real Q3 = %b | real RESULT = %b | ",A_prev,OUTPUT_prev,Q0_prev,Q1_prev,Q2_prev,Q3_prev,RESULT_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( A_expected_prev[12] !== 1'bx ) && ( A_prev[12] !== A_expected_prev[12] )
		&& ((A_expected_prev[12] !== last_A_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[12] = A_expected_prev[12];
	end
	if (
		( A_expected_prev[13] !== 1'bx ) && ( A_prev[13] !== A_expected_prev[13] )
		&& ((A_expected_prev[13] !== last_A_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[13] = A_expected_prev[13];
	end
	if (
		( A_expected_prev[14] !== 1'bx ) && ( A_prev[14] !== A_expected_prev[14] )
		&& ((A_expected_prev[14] !== last_A_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[14] = A_expected_prev[14];
	end
	if (
		( A_expected_prev[15] !== 1'bx ) && ( A_prev[15] !== A_expected_prev[15] )
		&& ((A_expected_prev[15] !== last_A_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[15] = A_expected_prev[15];
	end
	if (
		( OUTPUT_expected_prev[0] !== 1'bx ) && ( OUTPUT_prev[0] !== OUTPUT_expected_prev[0] )
		&& ((OUTPUT_expected_prev[0] !== last_OUTPUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[0] = OUTPUT_expected_prev[0];
	end
	if (
		( OUTPUT_expected_prev[1] !== 1'bx ) && ( OUTPUT_prev[1] !== OUTPUT_expected_prev[1] )
		&& ((OUTPUT_expected_prev[1] !== last_OUTPUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[1] = OUTPUT_expected_prev[1];
	end
	if (
		( OUTPUT_expected_prev[2] !== 1'bx ) && ( OUTPUT_prev[2] !== OUTPUT_expected_prev[2] )
		&& ((OUTPUT_expected_prev[2] !== last_OUTPUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[2] = OUTPUT_expected_prev[2];
	end
	if (
		( OUTPUT_expected_prev[3] !== 1'bx ) && ( OUTPUT_prev[3] !== OUTPUT_expected_prev[3] )
		&& ((OUTPUT_expected_prev[3] !== last_OUTPUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[3] = OUTPUT_expected_prev[3];
	end
	if (
		( OUTPUT_expected_prev[4] !== 1'bx ) && ( OUTPUT_prev[4] !== OUTPUT_expected_prev[4] )
		&& ((OUTPUT_expected_prev[4] !== last_OUTPUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[4] = OUTPUT_expected_prev[4];
	end
	if (
		( OUTPUT_expected_prev[5] !== 1'bx ) && ( OUTPUT_prev[5] !== OUTPUT_expected_prev[5] )
		&& ((OUTPUT_expected_prev[5] !== last_OUTPUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[5] = OUTPUT_expected_prev[5];
	end
	if (
		( OUTPUT_expected_prev[6] !== 1'bx ) && ( OUTPUT_prev[6] !== OUTPUT_expected_prev[6] )
		&& ((OUTPUT_expected_prev[6] !== last_OUTPUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[6] = OUTPUT_expected_prev[6];
	end
	if (
		( OUTPUT_expected_prev[7] !== 1'bx ) && ( OUTPUT_prev[7] !== OUTPUT_expected_prev[7] )
		&& ((OUTPUT_expected_prev[7] !== last_OUTPUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[7] = OUTPUT_expected_prev[7];
	end
	if (
		( OUTPUT_expected_prev[8] !== 1'bx ) && ( OUTPUT_prev[8] !== OUTPUT_expected_prev[8] )
		&& ((OUTPUT_expected_prev[8] !== last_OUTPUT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[8] = OUTPUT_expected_prev[8];
	end
	if (
		( OUTPUT_expected_prev[9] !== 1'bx ) && ( OUTPUT_prev[9] !== OUTPUT_expected_prev[9] )
		&& ((OUTPUT_expected_prev[9] !== last_OUTPUT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[9] = OUTPUT_expected_prev[9];
	end
	if (
		( OUTPUT_expected_prev[10] !== 1'bx ) && ( OUTPUT_prev[10] !== OUTPUT_expected_prev[10] )
		&& ((OUTPUT_expected_prev[10] !== last_OUTPUT_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[10] = OUTPUT_expected_prev[10];
	end
	if (
		( OUTPUT_expected_prev[11] !== 1'bx ) && ( OUTPUT_prev[11] !== OUTPUT_expected_prev[11] )
		&& ((OUTPUT_expected_prev[11] !== last_OUTPUT_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[11] = OUTPUT_expected_prev[11];
	end
	if (
		( OUTPUT_expected_prev[12] !== 1'bx ) && ( OUTPUT_prev[12] !== OUTPUT_expected_prev[12] )
		&& ((OUTPUT_expected_prev[12] !== last_OUTPUT_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[12] = OUTPUT_expected_prev[12];
	end
	if (
		( OUTPUT_expected_prev[13] !== 1'bx ) && ( OUTPUT_prev[13] !== OUTPUT_expected_prev[13] )
		&& ((OUTPUT_expected_prev[13] !== last_OUTPUT_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[13] = OUTPUT_expected_prev[13];
	end
	if (
		( OUTPUT_expected_prev[14] !== 1'bx ) && ( OUTPUT_prev[14] !== OUTPUT_expected_prev[14] )
		&& ((OUTPUT_expected_prev[14] !== last_OUTPUT_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[14] = OUTPUT_expected_prev[14];
	end
	if (
		( OUTPUT_expected_prev[15] !== 1'bx ) && ( OUTPUT_prev[15] !== OUTPUT_expected_prev[15] )
		&& ((OUTPUT_expected_prev[15] !== last_OUTPUT_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUTPUT_exp[15] = OUTPUT_expected_prev[15];
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( Q3_expected_prev !== 1'bx ) && ( Q3_prev !== Q3_expected_prev )
		&& ((Q3_expected_prev !== last_Q3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q3_expected_prev);
		$display ("     Real value = %b", Q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q3_exp = Q3_expected_prev;
	end
	if (
		( RESULT_expected_prev[0] !== 1'bx ) && ( RESULT_prev[0] !== RESULT_expected_prev[0] )
		&& ((RESULT_expected_prev[0] !== last_RESULT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[0] = RESULT_expected_prev[0];
	end
	if (
		( RESULT_expected_prev[1] !== 1'bx ) && ( RESULT_prev[1] !== RESULT_expected_prev[1] )
		&& ((RESULT_expected_prev[1] !== last_RESULT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[1] = RESULT_expected_prev[1];
	end
	if (
		( RESULT_expected_prev[2] !== 1'bx ) && ( RESULT_prev[2] !== RESULT_expected_prev[2] )
		&& ((RESULT_expected_prev[2] !== last_RESULT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[2] = RESULT_expected_prev[2];
	end
	if (
		( RESULT_expected_prev[3] !== 1'bx ) && ( RESULT_prev[3] !== RESULT_expected_prev[3] )
		&& ((RESULT_expected_prev[3] !== last_RESULT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[3] = RESULT_expected_prev[3];
	end
	if (
		( RESULT_expected_prev[4] !== 1'bx ) && ( RESULT_prev[4] !== RESULT_expected_prev[4] )
		&& ((RESULT_expected_prev[4] !== last_RESULT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[4] = RESULT_expected_prev[4];
	end
	if (
		( RESULT_expected_prev[5] !== 1'bx ) && ( RESULT_prev[5] !== RESULT_expected_prev[5] )
		&& ((RESULT_expected_prev[5] !== last_RESULT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[5] = RESULT_expected_prev[5];
	end
	if (
		( RESULT_expected_prev[6] !== 1'bx ) && ( RESULT_prev[6] !== RESULT_expected_prev[6] )
		&& ((RESULT_expected_prev[6] !== last_RESULT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[6] = RESULT_expected_prev[6];
	end
	if (
		( RESULT_expected_prev[7] !== 1'bx ) && ( RESULT_prev[7] !== RESULT_expected_prev[7] )
		&& ((RESULT_expected_prev[7] !== last_RESULT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[7] = RESULT_expected_prev[7];
	end
	if (
		( RESULT_expected_prev[8] !== 1'bx ) && ( RESULT_prev[8] !== RESULT_expected_prev[8] )
		&& ((RESULT_expected_prev[8] !== last_RESULT_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[8] = RESULT_expected_prev[8];
	end
	if (
		( RESULT_expected_prev[9] !== 1'bx ) && ( RESULT_prev[9] !== RESULT_expected_prev[9] )
		&& ((RESULT_expected_prev[9] !== last_RESULT_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[9] = RESULT_expected_prev[9];
	end
	if (
		( RESULT_expected_prev[10] !== 1'bx ) && ( RESULT_prev[10] !== RESULT_expected_prev[10] )
		&& ((RESULT_expected_prev[10] !== last_RESULT_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[10] = RESULT_expected_prev[10];
	end
	if (
		( RESULT_expected_prev[11] !== 1'bx ) && ( RESULT_prev[11] !== RESULT_expected_prev[11] )
		&& ((RESULT_expected_prev[11] !== last_RESULT_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[11] = RESULT_expected_prev[11];
	end
	if (
		( RESULT_expected_prev[12] !== 1'bx ) && ( RESULT_prev[12] !== RESULT_expected_prev[12] )
		&& ((RESULT_expected_prev[12] !== last_RESULT_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[12] = RESULT_expected_prev[12];
	end
	if (
		( RESULT_expected_prev[13] !== 1'bx ) && ( RESULT_prev[13] !== RESULT_expected_prev[13] )
		&& ((RESULT_expected_prev[13] !== last_RESULT_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[13] = RESULT_expected_prev[13];
	end
	if (
		( RESULT_expected_prev[14] !== 1'bx ) && ( RESULT_prev[14] !== RESULT_expected_prev[14] )
		&& ((RESULT_expected_prev[14] !== last_RESULT_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[14] = RESULT_expected_prev[14];
	end
	if (
		( RESULT_expected_prev[15] !== 1'bx ) && ( RESULT_prev[15] !== RESULT_expected_prev[15] )
		&& ((RESULT_expected_prev[15] !== last_RESULT_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESULT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESULT_expected_prev);
		$display ("     Real value = %b", RESULT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RESULT_exp[15] = RESULT_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module LAB4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] Input;
reg RESET;
reg X;
// wires                                               
wire [15:0] A;
wire [15:0] OUTPUT;
wire Q0;
wire Q1;
wire Q2;
wire Q3;
wire [15:0] RESULT;

wire sampler;                             

// assign statements (if any)                          
LAB4 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.CLK(CLK),
	.\Input (Input),
	.\OUTPUT (OUTPUT),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.RESET(RESET),
	.RESULT(RESULT),
	.X(X)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// RESET
initial
begin
	RESET = 1'b0;
	RESET = #30000 1'b1;
end 

// X
initial
begin
	X = 1'b1;
end 

// Input[15]
initial
begin
	Input[15] = 1'b0;
	Input[15] = #100000 1'b1;
	Input[15] = #300000 1'b0;
end 

// Input[14]
initial
begin
	Input[14] = 1'b1;
	Input[14] = #400000 1'b0;
	Input[14] = #400000 1'b1;
end 

// Input[13]
initial
begin
	Input[13] = 1'b1;
	Input[13] = #100000 1'b0;
	Input[13] = #100000 1'b1;
	Input[13] = #200000 1'b0;
	Input[13] = #200000 1'b1;
	Input[13] = #200000 1'b0;
end 

// Input[12]
initial
begin
	Input[12] = 1'b1;
	Input[12] = #200000 1'b0;
	Input[12] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		Input[12] = 1'b0;
		Input[12] = #100000 1'b1;
		# 100000;
	end
	Input[12] = 1'b0;
	Input[12] = #100000 1'b1;
end 

// Input[11]
initial
begin
	Input[11] = 1'b0;
	Input[11] = #200000 1'b1;
end 

// Input[10]
initial
begin
	Input[10] = 1'b1;
	Input[10] = #200000 1'b0;
	Input[10] = #400000 1'b1;
end 

// Input[9]
initial
begin
	repeat(2)
	begin
		Input[9] = 1'b1;
		Input[9] = #200000 1'b0;
		# 200000;
	end
	Input[9] = 1'b1;
end 

// Input[8]
always
begin
	Input[8] = 1'b0;
	Input[8] = #100000 1'b1;
	#100000;
end 

// Input[7]
always
begin
	Input[7] = 1'b0;
	Input[7] = #500000 1'b1;
	#500000;
end 

// Input[6]
always
begin
	Input[6] = 1'b0;
	Input[6] = #100000 1'b1;
	Input[6] = #400000 1'b0;
	Input[6] = #400000 1'b1;
	#100000;
end 

// Input[5]
always
begin
	Input[5] = 1'b1;
	# 100000;
	repeat(2)
	begin
		Input[5] = 1'b0;
		Input[5] = #200000 1'b1;
		# 200000;
	end
	Input[5] = 1'b0;
	#100000;
end 

// Input[4]
always
begin
	Input[4] = 1'b1;
	Input[4] = #100000 1'b0;
	# 100000;
	repeat(3)
	begin
		Input[4] = 1'b1;
		Input[4] = #100000 1'b0;
		# 100000;
	end
	Input[4] = 1'b1;
	Input[4] = #100000 1'b0;
	#100000;
end 

// Input[3]
initial
begin
	Input[3] = 1'b1;
	Input[3] = #800000 1'b0;
end 

// Input[2]
initial
begin
	Input[2] = 1'b0;
	Input[2] = #400000 1'b1;
	Input[2] = #400000 1'b0;
end 

// Input[1]
initial
begin
	repeat(2)
	begin
		Input[1] = 1'b0;
		Input[1] = #200000 1'b1;
		# 200000;
	end
	Input[1] = 1'b0;
end 

// Input[0]
always
begin
	Input[0] = 1'b0;
	Input[0] = #100000 1'b1;
	#100000;
end 

LAB4_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Input(Input),
	.RESET(RESET),
	.X(X),
	.sampler_tx(sampler)
);

LAB4_vlg_check_tst tb_out(
	.A(A),
	.OUTPUT(OUTPUT),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.RESULT(RESULT),
	.sampler_rx(sampler)
);
endmodule

